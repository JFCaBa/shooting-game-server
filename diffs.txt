diff --git a/src/handlers/GameHandler.js b/src/handlers/GameHandler.js
index 57bae08..cd85d27 100644
--- a/src/handlers/GameHandler.js
+++ b/src/handlers/GameHandler.js
@@ -267,49 +267,71 @@ class GameHandler {
         }
     }
 
-    handleJoin(data, playerId, ws) {
-        if (!this.wsManager.clients.has(playerId)) {
+    async handleJoin(data, playerId, ws) {
+        if (!this.wsManager.clients.has(playerId)) {    
             logger.info(`Registering new player: ${playerId}`);
-    
+        
             // Add the new player to WebSocket manager
             this.wsManager.clients.set(playerId, ws);
     
-            // Fetch or create the player in the database
-            this.playerService.getPlayer(playerId)  // This will create the player if not found
-                .then(() => {
-                    // Initialize player stats
-                    this.initPlayerStats(playerId);
-                    
-                    // Start tracking survival
-                    this.startSurvivalTracking(playerId);
-
-                    // Send current players to the joining player
-                    const currentPlayers = [];
-                    this.wsManager.clients.forEach((_, id) => {
-                        if (id !== playerId) {
-                            const playerData = this.getPlayerStats(id);
-                            currentPlayers.push({
-                                type: 'announced',
-                                kind: 'player',
-                                playerId: id,
-                                data: { player: playerData },
-                                timestamp: new Date().toISOString()
-                            });
-                        }
-                    });
-
-                    // Send existing players to new player
-                    currentPlayers.forEach(playerData => {
-                        ws.send(JSON.stringify(playerData));
-                    });
-                })
-                .catch((error) => {
-                    logger.error(`Error registering new player: ${error.message}`);
+            // Update player location if provided
+            if (data.location) {
+                const updatedLocation = {
+                    latitude: data.location.latitude,
+                    longitude: data.location.longitude,
+                    accuracy: data.location.accuracy,
+                    altitude: data.location.altitude,
+                    updatedAt: new Date()
+                };
+    
+                try {
+                    await Player.findOneAndUpdate(
+                        { playerId: playerId },
+                        { $set: { location: updatedLocation } },
+                        { new: true } // Return the updated document
+                    );
+                } catch (error) {
+                    logger.error(`Error updating player location: ${error.message}`);
+                }
+            }
+    
+            try {
+                // Fetch or create the player in the database
+                await this.playerService.getPlayer(playerId);
+    
+                // Initialize player stats
+                this.initPlayerStats(playerId);
+    
+                // Start tracking survival
+                this.startSurvivalTracking(playerId);
+    
+                // Send current players to the joining player
+                const currentPlayers = [];
+                this.wsManager.clients.forEach((_, id) => {
+                    if (id !== playerId) {
+                        const playerData = this.getPlayerStats(id);
+                        currentPlayers.push({
+                            type: 'announced',
+                            kind: 'player',
+                            playerId: id,
+                            data: { player: playerData },
+                            timestamp: new Date().toISOString()
+                        });
+                    }
                 });
+    
+                // Send existing players to the new player
+                currentPlayers.forEach(playerData => {
+                    ws.send(JSON.stringify(playerData));
+                });
+            } catch (error) {
+                logger.error(`Error registering new player: ${error.message}`);
+            }
         } else {
             logger.info(`Player ${playerId} is already connected.`);
         }
     
+        // Broadcast the join message to all clients
         this.wsManager.broadcastToAll(data, playerId);
     }
 }
diff --git a/src/models/Location.js b/src/models/Location.js
new file mode 100644
index 0000000..c363072
--- /dev/null
+++ b/src/models/Location.js
@@ -0,0 +1,26 @@
+const mongoose = require('mongoose');
+
+const locationSchema = new mongoose.Schema({
+    latitude: {
+        type: Number,
+        default: null
+    },
+    longitude: {
+        type: Number,
+        default: null
+    },
+    altitude: {
+        type: Number,
+        default: 0
+    },
+    accuracy: {
+        type: Number,
+        default: 2000
+    },
+    updatedAt: {
+        type: Date,
+        default: Date.now
+    }
+});
+
+module.exports = locationSchema;
\ No newline at end of file
diff --git a/src/models/Player.js b/src/models/Player.js
index b921d11..a089e47 100644
--- a/src/models/Player.js
+++ b/src/models/Player.js
@@ -1,4 +1,5 @@
 const mongoose = require('mongoose');
+const locationSchema = require('./Location');
 
 const playerSchema = new mongoose.Schema({
     playerId: {
@@ -8,7 +9,7 @@ const playerSchema = new mongoose.Schema({
     },
     kind: {
         type: String,
-        require: false,
+        required: false,
         default: "player"
     },
     walletAddress: {
@@ -30,7 +31,7 @@ const playerSchema = new mongoose.Schema({
         deaths: { type: Number, default: 0 },
         droneHits: { type: Number, default: 0 },
         survivalStart: { type: Date, default: Date.now },
-        accuracy: {type: Number, default: 0}
+        accuracy: { type: Number, default: 0 }
     },
     lastActive: {
         type: Date,
@@ -47,6 +48,10 @@ const playerSchema = new mongoose.Schema({
     lastUpdate: {
         type: Date,
         default: Date.now
+    },
+    location: {
+        type: locationSchema, 
+        default: () => ({})
     }
 });
 
diff --git a/src/websocket/WebSocketManager.js b/src/websocket/WebSocketManager.js
index 26a93dc..9248c1d 100644
--- a/src/websocket/WebSocketManager.js
+++ b/src/websocket/WebSocketManager.js
@@ -67,18 +67,12 @@ class WebSocketManager {
     }
 
     async handleMessage(data, playerId, senderId, ws) {
-        logger.info('Message received:', {
-            type: data.type,
-            from: playerId,
-            to: senderId
-        });
-
         switch (data.type) {
             case 'join':
                 if (data.pushToken) {
                     await this.updatePlayerPushToken(playerId, data.pushToken);
                 }
-                this.gameHandler.handleJoin(data, playerId, ws);
+                await this.gameHandler.handleJoin(data.data, playerId, ws);
                 await this.notificationService.notifyPlayersAboutNewJoin(data);
                 await this.geoObjectHandler.startGeoObjectGeneration(data);
                 break;
